package mmu

import (
	"fmt"
	"strings"
)

const BOOTROM_SIZE = 256

const ROM_START = 0x0100
const HRAM_START = 0xFF80
const HRAM_END = 0xFFFE

var BOOTROM = [BOOTROM_SIZE]byte{
	0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb, 0x7c, 0x20, 0xfb,
	0x21, 0x26, 0xff, 0x0e, 0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3,
	0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0, 0x47, 0x11, 0x04, 0x01,
	0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b,
	0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22,
	0x23, 0x05, 0x20, 0xf9, 0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99,
	0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20, 0xf9, 0x2e, 0x0f, 0x18,
	0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04,
	0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20,
	0xf7, 0x1d, 0x20, 0xf2, 0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62,
	0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06, 0x7b, 0xe2, 0x0c, 0x3e,
	0x87, 0xe2, 0xf0, 0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
	0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5, 0xcb, 0x11, 0x17,
	0xc1, 0xcb, 0x11, 0x17, 0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9,
	0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b, 0x03, 0x73, 0x00, 0x83,
	0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e,
	0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63,
	0x6e, 0x0e, 0xec, 0xcc, 0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e,
	0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c, 0x21, 0x04, 0x01, 0x11,
	0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20,
	0xf5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x20, 0xfe,
	0x3e, 0x01, 0xe0, 0x50,
}

type MemoryManagementUnit struct {
	hram [0x100]byte
	wram [0x8000]byte
	vram [0x4000]byte

	div uint32
}

func (m *MemoryManagementUnit) Dump() string {
	var str strings.Builder
	str.WriteString("\n")
	for i := 0; i < len(m.hram); i += 2 {
		if i%16 == 0 && i != 0 {
			str.WriteString("\n")
		}
		s := fmt.Sprintf("%02x%02x ", m.hram[i], m.hram[i+1])
		str.WriteString(s)

	}
	str.WriteString("\n")
	return strings.ToUpper(str.String())
}

func New() *MemoryManagementUnit {
	return &MemoryManagementUnit{}
}

func (m *MemoryManagementUnit) Init(rom []byte) {
	m.hram = BOOTROM

	for i, v := range rom {
		m.vram[ROM_START+i] = v
	}
}

func (m *MemoryManagementUnit) RB(address uint16) byte {
	if address < HRAM_END && address > HRAM_START {
		return m.hram[address]
	}

	return m.wram[address]
}

func (m *MemoryManagementUnit) WB(address uint16, value byte) {
	if address < HRAM_END && address > HRAM_START {
		m.hram[address] = value
	}

	m.wram[address] = value
}

func (m *MemoryManagementUnit) RW(address uint16) uint16 {
	var b1, b2 byte

	if address < HRAM_END && address > HRAM_START {
		b1 = m.hram[address]
		b2 = m.hram[address+1]
	} else {
		b1 = m.wram[address]
		b2 = m.wram[address+1]
	}

	return uint16(b1)<<8 | uint16(b2)
}

func (m *MemoryManagementUnit) DoCycle(ticks uint32) uint32 {
	m.div += ticks
	return m.div
}
